@page "/swipecard"
@implements IDisposable


<div class="card-stack">
    @foreach(var card in Cards)
    {
        <div @ref="card.ElementRef" class="stack-card">
            <MudCard Elevation="5" Style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; object-fit: cover;">
                <div style="position: relative; width: 100%; height: 65%;">
                    <MudCardMedia Image="@card.DateIdea.ImageUrl" Style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; object-fit: cover;" />
                </div>
                <MudCardContent Style="height: 35%; background-color: #1D1E20">
                    <MudText Typo="Typo.h6">@card.DateIdea.Title</MudText>
                    <MudText>@card.DateIdea.Description</MudText>
                </MudCardContent>
            </MudCard>
        </div>
    }
</div>

<!-- Adjusted the bottom padding and possibly reduce the size of icons if needed -->
<div Class="d-flex justify-content-around pb-2" style="width: 100%;">
    <MudIconButton Icon="@Icons.Outlined.CheckCircle" Color="Color.Primary" Size="Size.Large" />
    <MudIconButton Icon="@Icons.Outlined.Cancel" Color="Color.Secondary" Size="Size.Large" />
</div>

@code {


    [Parameter]
    public List<SwipeCardModel> Cards { get; set; }

    [Parameter]
    public EventCallback<string> OnSwiped { get; set; }

    [Inject]
    private IJSRuntime JSRuntime { get; set; }

    private DotNetObjectReference<SwipeCard> _objRef;

    protected override void OnInitialized()
    {
        _objRef = DotNetObjectReference.Create(this);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            foreach (var card in Cards)
            {
                await JSRuntime.InvokeVoidAsync("initializeSwipe", card.ElementRef, _objRef);
            }
        }
    }

    [JSInvokable]
    public async Task OnSwipeDetected(string direction)
    {
        if (Cards.Any())
        {
            var swipedCard = Cards.Last();
            Console.WriteLine($"Card {swipedCard.Id} swiped {direction}");
            await OnSwiped.InvokeAsync(direction);

            // Set visibility to false instead of removing the card from DOM directly
            swipedCard.IsVisible = false;
            Cards.Remove(swipedCard);
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        _objRef?.Dispose();
    }

    private void HandleMouseDown(MouseEventArgs e, SwipeCardModel card)
    {
        // Logic for handling mouse down event if needed
    }
}
