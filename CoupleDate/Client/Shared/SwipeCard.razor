@page "/swipecard"
@implements IDisposable
@inject IDateDecisionService DateDecisionService

<div class="card-stack-container text-center">
    <div class="card-stack mx-auto">
        @foreach (var card in Cards)
        {
            <div @ref="card.ElementRef" class="stack-card">
                <MudCard Elevation="1" class="card-container">
                    <div style="position: relative; width: 100%; height: auto;">
                        <MudCardMedia Image="@card.DateIdea.ImageUrl" class="card-image" />
                    </div>
                    <MudCardContent class="card-content">
                        <div class="d-flex justify-content-center flex-row ">
                            @foreach (var category in @card.DateIdea.Categories)
                            {
                                <MudChip T="string" Color="Color.Primary">@category.Name</MudChip>
                            }
                        </div>
                       
                        <MudText Typo="Typo.h6">@card.DateIdea.Title</MudText>
                        <MudText>@card.DateIdea.Description</MudText>
                    </MudCardContent>
                </MudCard>
            </div>
        }
    </div>
</div>

<div class="buttons-container text-center mt-5">
    <MudIconButton Icon="@Icons.Material.Rounded.CheckCircleOutline" Size="Size.Large" class="mud-icon-button" style="color: #00FF00;" />
    <MudIconButton Icon="@Icons.Material.Outlined.Cancel" Size="Size.Large" class="mud-icon-button" style="color: #FF0000;" />
</div>




@code {


    [Parameter]
    public List<SwipeCardModel> Cards { get; set; }

    [Parameter]
    public EventCallback<string> OnSwiped { get; set; }

    [Inject]
    private IJSRuntime JSRuntime { get; set; }

    private DotNetObjectReference<SwipeCard> _objRef;

    protected override void OnInitialized()
    {
        _objRef = DotNetObjectReference.Create(this);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            foreach (var card in Cards)
            {
                await JSRuntime.InvokeVoidAsync("initializeSwipe", card.ElementRef, _objRef);
            }
        }
    }

    [JSInvokable]
    public async Task OnSwipeDetected(string direction)
    {
        if (Cards.Any())
        {
            var swipedCard = Cards.Last();
            Console.WriteLine($"Card {swipedCard.Id} swiped {direction}");
            await OnSwiped.InvokeAsync(direction);

            var swipeRequest = new SwipeRequest()
                {
                    DateId = swipedCard.Id,
                    Liked = (direction == "right") ? true : false
                };
            await DateDecisionService.SwipeAsync(swipeRequest);
            // Set visibility to false instead of removing the card from DOM directly
            swipedCard.IsVisible = false;
            Cards.Remove(swipedCard);
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        _objRef?.Dispose();
    }

    private void HandleMouseDown(MouseEventArgs e, SwipeCardModel card)
    {
        // Logic for handling mouse down event if needed
    }
}
