@page "/"
@using MudBlazor
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IInvitationService InvitationService
@inject IDialogService DialogService
@inject IDateDecisionService DateDecisionService

<MudContainer MaxWidth="MaxWidth.Small" Class="px-2 d-flex justify-content-center flex-column">
    @if (Cards != null && Cards.Any())
    {
        <SwipeCard Cards="Cards"></SwipeCard>
    }
    else
    {
        <MudText Typo="Typo.h5" GutterBottom="true">Loading date ideas...</MudText>
    }
    </MudContainer>

    @code {
    private bool? isInCouple;
    private List<SwipeCardModel> Cards;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            var response = await InvitationService.IsUserInCouple();
            if (response.Success)
            {
                isInCouple = response.Data;
            }
            else
            {
                isInCouple = false;
            }

            await FetchDateIdeas();
        }
    }

    private async Task FetchDateIdeas()
    {
        var dateIdeasResponse = await DateDecisionService.GetDateIdeasAsync();
        if (dateIdeasResponse.Success && dateIdeasResponse.Data != null)
        {
            Cards = dateIdeasResponse.Data.Select(idea => new SwipeCardModel
                {
                    DateIdea = idea,
                    Id = idea.Id
                }).ToList();
        }
    }

    private async Task OpenInvitePartnerDialog()
    {
        var result = await InvitationService.GenerateInvitationLinkAsync();
        if (result.Success)
        {
            var options = new DialogOptions { CloseOnEscapeKey = true };
            DialogService.Show<ShareDialog>("Share Invitation Link", new DialogParameters { { "invitationLink", result.Data } }, options);
        }
    }
}
