@page "/invitation"
@using Blazored.LocalStorage
@inject ILocalStorageService localStorage
@inject NavigationManager Navigation
@inject IInvitationService InvitationService
@inject IAuthService AuthService
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime

<MudAppBar Class="d-flex justify-content-center align-items-center">
    <MudText Typo="Typo.h6">Invite Your Partner</MudText>
</MudAppBar>

<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-4">
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="GenerateLink">Invite Your Partner</MudButton>
    <MudDialog @bind-Open="_open">
        <DialogContent>
            <MudText Typo="Typo.h6">Share the following link with your partner:</MudText>
            <MudText Typo="Typo.subtitle1">@invitationLink</MudText>
            <MudButton Variant="Variant.Outlined" OnClick="CopyLink">Copy Link</MudButton>
            <!-- Share options -->
            <div class="share-options mt-2">
                <MudIconButton Icon="@Icons.Material.Filled.Message" OnClick="ShareViaWhatsApp" />
                <MudIconButton Icon="@Icons.Material.Filled.Person" OnClick="ShareViaFacebook" />
                <MudIconButton Icon="@Icons.Material.Filled.Email" OnClick="ShareViaEmail" />
                <!-- Add more share options as needed -->
            </div>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="CloseDialog">Close</MudButton>
        </DialogActions>
    </MudDialog>
</MudContainer>

@code {
    private bool _open;
    private string invitationLink;

    private async Task GenerateLink()
    {
        Console.WriteLine("Generating link...");
        var response = await InvitationService.GenerateInvitationLinkAsync();
        if (response.Success)
        {
            invitationLink = response.Data;
            Console.WriteLine("Link generated: " + invitationLink);
            _open = true;
        }
        else
        {
            Snackbar.Add(response.Message, Severity.Error);
            Console.WriteLine("Error generating link: " + response.Message);
        }
    }

    private async Task CopyLink()
    {
        await JSRuntime.InvokeVoidAsync("copyToClipboard", invitationLink);
        Snackbar.Add("Link copied to clipboard!", Severity.Success);
        Console.WriteLine("Link copied to clipboard");
    }

    private void ShareViaWhatsApp()
    {
        var url = $"https://wa.me/?text={invitationLink}";
        Navigation.NavigateTo(url, true);
    }

    private void ShareViaFacebook()
    {
        var url = $"https://www.facebook.com/sharer/sharer.php?u={invitationLink}";
        Navigation.NavigateTo(url, true);
    }

    private void ShareViaEmail()
    {
        var mailto = $"mailto:?subject=Invitation&body=Join me here: {invitationLink}";
        Navigation.NavigateTo(mailto, true);
    }

    private void CloseDialog() => _open = false;
}
